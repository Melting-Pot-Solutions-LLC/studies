Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

#PYTHON
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        answer = []
        
	#remove all duplicates until nums[0] is single
        while(nums.count(nums[0]) == 2):
            element_to_remove = nums[0]
            nums.remove(element_to_remove)
            nums.remove(element_to_remove)
            
	#remove all duplicates until nums[1] is single
        while(nums.count(nums[1]) == 2):
            element_to_remove = nums[1]
            nums.remove(element_to_remove)
            nums.remove(element_to_remove)
                
        answer.append(nums[0])
        answer.append(nums[1])
        
        return answer


//C
//4ms O(n) Time O(1) space
int* singleNumber(int* nums, int numsSize, int* returnSize) {
    if (!nums || (numsSize < 2)) return NULL;
    int* ret = (int*)malloc(sizeof(int) * 2);
    if (ret) {
        int i, x = 0, y = 0, flag, tmp;
        for (i = 0; i < numsSize; i++) x ^= nums[i];
        flag = x & -x; //Get last bit of x https://leetcode.com/discuss/52377/3-lines-ruby-4-lines-c
        for (i = 0; i < numsSize; i++) if ((tmp = nums[i]) & flag) y ^= tmp;
        ret[0] = x ^ y;
        ret[1] = y;
        if (returnSize) *returnSize = 2;
    }
    return ret;
}
